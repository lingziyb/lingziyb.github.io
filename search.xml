<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面纱</title>
      <link href="/2019/08/19/book-veil/"/>
      <url>/2019/08/19/book-veil/</url>
      
        <content type="html"><![CDATA[<h3 id="为何看"><a href="#为何看" class="headerlink" title="为何看"></a>为何看</h3><blockquote><p>一部饱受争议却直探人生真谛的女性精神觉醒之作。</p></blockquote><p>别掀开被那些活着的人称之为生活的华丽面纱。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一个美丽虚荣的贵族女子，迫于情形自愿嫁给她并不喜欢的香港细菌学家。然后出轨爱上一位风流倜傥的男子。后被丈夫发现，丈夫没有责怪他，而是带她去霍乱肆虐的疫区。同时她也发现了它所爱之人是个自私而又虚荣的小人。</p><p>她便心灰意冷的随丈夫去了。</p><p>然后，她看到天主教的教徒义无反顾的拯救病人、照顾病人、照顾被抛弃的孩子；</p><p>随后丈夫的以身殉职；平常高冷的丈夫在他人眼里，都是非常高的评价。可惜她就是不喜欢他，厌烦他。</p><p>回到香港后，那位风流倜傥的男子的妻子邀请她在家里住，因为佩服她随丈夫去疫区。然后又验证了内心的所谓的放荡，有这样的对话：</p><blockquote><p>她问：“你想过没有，你欠你妻子一份忠诚？”<br>他笑道：“她眼不见，心就不烦。”</p></blockquote><p>男子还尝试着洗脑式的让她继续做他的情人，从言语中找不出一丝破绽。她还是良知发现，第二天离开了。</p><p>她回到自己的国家，回到自己的家乡。并眼看母亲的去世，父亲也因母亲的离世而脱离苦海。她跟父亲重燃父女之情。并着重强调让自己的女儿不走自己和母亲的旧路。<br>她最后说的一番话：</p><blockquote><p>“我想要个女孩，因为我想把她养大，不让她犯我犯过的错误。当我回头看过去的那个我，我恨自己，可是我别无选择。我要把我的女儿抚养大，让她成为一个自由、独立的人。把一个孩子带到这个世界上，爱她，养她，不是为了让她将来和哪个男人睡觉，从而让他心甘情愿地为她下半辈子提供吃的、住的，这种事我是不会做的。”</p></blockquote><p>–</p><blockquote><p>“就让我坦白这一次，父亲。我愚蠢、缺德、可恨。我已经受到了严厉的惩罚。我决定不让我的女儿沾染这些。我想让她变得勇敢直率。我想让她成为一个不依赖别人的人，因为她能够掌控自己。我想让她像个自由的人那样对待生活，比我活得更好。”</p></blockquote><h3 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h3><p>继《霍乱时期的爱情》，又一本关于霍乱的书籍。在直击生命如繁花一瞬，才知何须畏惧直视生命的真相。<br>愚蠢、虚伪、缺德…</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 灵魂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 用法积累</title>
      <link href="/2019/08/12/git-use/"/>
      <url>/2019/08/12/git-use/</url>
      
        <content type="html"><![CDATA[<h4 id="1-远程仓库"><a href="#1-远程仓库" class="headerlink" title="1. 远程仓库"></a>1. 远程仓库</h4><ul><li><p>从远程库克隆</p><pre class=" language-javascript"><code class="language-javascript">git clone git@server<span class="token operator">-</span>name<span class="token punctuation">:</span>path<span class="token operator">/</span>repo<span class="token operator">-</span>name<span class="token punctuation">.</span>git</code></pre></li><li><p>关联远程库</p><pre class=" language-javascript"><code class="language-javascript">git remote add origin git@server<span class="token operator">-</span>name<span class="token punctuation">:</span>path<span class="token operator">/</span>repo<span class="token operator">-</span>name<span class="token punctuation">.</span>git</code></pre></li></ul><h4 id="2-推送"><a href="#2-推送" class="headerlink" title="2. 推送"></a>2. 推送</h4><pre class=" language-javascript"><code class="language-javascript">git push origin master</code></pre><h4 id="3-误删远程dev分支"><a href="#3-误删远程dev分支" class="headerlink" title="3. 误删远程dev分支"></a>3. 误删远程dev分支</h4><ul><li>使用git log -g 找回之前提交的commit</li><li>使用git branch dev commit_id命令用这个commit创建一个分支</li><li>切换到dev分支</li></ul><p>参考文章：<br>git 误删分支恢复方法：<a href="https://blog.csdn.net/new03/article/details/84920771" target="_blank" rel="noopener">https://blog.csdn.net/new03/article/details/84920771</a></p><h4 id="4-git提交了过大的文件-导致push报错"><a href="#4-git提交了过大的文件-导致push报错" class="headerlink" title="4. git提交了过大的文件  导致push报错"></a>4. git提交了过大的文件  导致push报错</h4><p><img src="https://upload-images.jianshu.io/upload_images/3453108-eab486789cc4462d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>解决：<br><img src="https://upload-images.jianshu.io/upload_images/3453108-5051a5e70bf7437e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>参考链接：<a href="https://blog.csdn.net/yimingsilence/article/details/81460278" target="_blank" rel="noopener">https://blog.csdn.net/yimingsilence/article/details/81460278</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序采坑系列</title>
      <link href="/2019/08/12/wechat/"/>
      <url>/2019/08/12/wechat/</url>
      
        <content type="html"><![CDATA[<h4 id="1-报错：request-fail-url-not-in-domain-list。"><a href="#1-报错：request-fail-url-not-in-domain-list。" class="headerlink" title="1. 报错：request:fail url not in domain list。"></a>1. 报错：<code>request:fail url not in domain list</code>。</h4><p>在获取地址时，用的腾讯api解析的经纬度，测试时没问题，上线了就报这个错了。</p><p>解决方案：</p><blockquote><p>微信公众平台，在“设置” -&gt; “开发设置”中设置request合法域名，添加 <code>https://apis.map.qq.com</code>。（本来以为他们是一家，不用加，结果还是要加。）</p></blockquote><p>参考：<a href="https://blog.csdn.net/weixin_43047977/article/details/84836501" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43047977/article/details/84836501</a></p><h4 id="2-蓝二公子去约会了，下次再来看你。"><a href="#2-蓝二公子去约会了，下次再来看你。" class="headerlink" title="2. 蓝二公子去约会了，下次再来看你。"></a>2. 蓝二公子去约会了，下次再来看你。</h4>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native遇坑的陈列-3</title>
      <link href="/2019/08/12/react-native-3/"/>
      <url>/2019/08/12/react-native-3/</url>
      
        <content type="html"><![CDATA[<h3 id="记录开始"><a href="#记录开始" class="headerlink" title="记录开始"></a>记录开始</h3><blockquote><p>之前都是在windows上开发，公司配的mac终于到了，现在开始用上mac。然而对于一个从未使用过mac的人来说，啊…亚历山大。</p></blockquote><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>react：16.8.3<br>react-native：0.59.9<br>react-navigation：3.11.0</p><p>windows / mac<br>android studio安卓模拟器 / 安卓手机<br>xcode iphone模拟器 / iphone</p><h3 id="记录罗列"><a href="#记录罗列" class="headerlink" title="记录罗列"></a>记录罗列</h3><ol><li><p>mac 安装 jdk1.8：</p><pre class=" language-javascript"><code class="language-javascript">brew cask install adoptopenjdk<span class="token operator">/</span>openjdk<span class="token operator">/</span>adoptopenjdk8</code></pre></li><li><p>第三方分享和登录，用的友盟。</p></li></ol><ul><li>友盟react-native分享文档：<a href="https://developer.umeng.com/docs/66632/detail/67587#h3-u5206u4EAB" target="_blank" rel="noopener">https://developer.umeng.com/docs/66632/detail/67587#h3-u5206u4EAB</a></li><li>React Native 结合友盟实现分享：<a href="https://juejin.im/post/5c17ba876fb9a049b07d440f#heading-16" target="_blank" rel="noopener">https://juejin.im/post/5c17ba876fb9a049b07d440f#heading-16</a></li><li><a href="https://www.jianshu.com/p/d54b259f7cb0" target="_blank" rel="noopener">https://www.jianshu.com/p/d54b259f7cb0</a></li><li><a href="https://github.com/songxiaoliang/react-native-share" target="_blank" rel="noopener">https://github.com/songxiaoliang/react-native-share</a></li></ul><ol start="3"><li><p>mac  终端翻墙</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> http_proxy<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">1087</span><span class="token keyword">export</span> https_proxy<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">1087</span></code></pre><p>参考链接：<a href="http://kerminate.me/2018/10/22/mac-%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%8E%B0%E7%BF%BB%E5%A2%99/" target="_blank" rel="noopener">http://kerminate.me/2018/10/22/mac-%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%8E%B0%E7%BF%BB%E5%A2%99/</a></p></li><li><p>误删远程dev分支</p></li></ol><ul><li>使用git log -g 找回之前提交的commit</li><li>使用git branch dev commit_id命令用这个commit创建一个分支</li><li>切换到dev分支</li></ul><p>参考文章：<br>git 误删分支恢复方法：<a href="https://blog.csdn.net/new03/article/details/84920771" target="_blank" rel="noopener">https://blog.csdn.net/new03/article/details/84920771</a></p><ol start="5"><li><p>友盟第三方微信分享，唤起微信授权后不走回调。<br>问题解决：回调包wxapi这个文件夹要放在项目包酱人（说明：酱人是我们项目的名称）里面（之前是跟jiangren平级的）。<br><img src="https://upload-images.jianshu.io/upload_images/3453108-a7901361fd38e8fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>git提交了过大的文件  导致push报错<br><img src="https://upload-images.jianshu.io/upload_images/3453108-eab486789cc4462d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ol><p>解决：<br><img src="https://upload-images.jianshu.io/upload_images/3453108-5051a5e70bf7437e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>参考链接：<a href="https://blog.csdn.net/yimingsilence/article/details/81460278" target="_blank" rel="noopener">https://blog.csdn.net/yimingsilence/article/details/81460278</a></p><ol start="7"><li><p>友盟第三方分享登录：<br>IMEI授权，友盟官网没有说清楚这段代码是加在哪个文件：<br><img src="https://upload-images.jianshu.io/upload_images/3453108-a8ef6735811bbfa1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>问了rn群里的小伙伴才知是加在 MainActivity.java 里！<br><img src="https://upload-images.jianshu.io/upload_images/3453108-7a305492404585d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>非 组件页面  用路由的问题。<br>解决方案：暴露navigation在全局。<br><img src="https://upload-images.jianshu.io/upload_images/3453108-456606797df00cac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> react-native </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native遇坑的陈列-2</title>
      <link href="/2019/08/12/react-native-2/"/>
      <url>/2019/08/12/react-native-2/</url>
      
        <content type="html"><![CDATA[<h3 id="记录开始"><a href="#记录开始" class="headerlink" title="记录开始"></a>记录开始</h3><blockquote><p>继上一篇继续</p></blockquote><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>react：16.8.3<br>react-native：0.59.9<br>react-navigation：3.11.0</p><p>windows<br>android studio安卓模拟器 / 安卓手机    </p><h3 id="记录罗列"><a href="#记录罗列" class="headerlink" title="记录罗列"></a>记录罗列</h3><ol><li><p>显示富文本：react-native-webview。但是字体显示不正常，要在接口返回的html里加上viewport 适配：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>WebViewsource<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    html<span class="token punctuation">:</span>      <span class="token string">"&lt;meta content="</span>width<span class="token operator">=</span>device<span class="token operator">-</span>width<span class="token punctuation">,</span> initial<span class="token operator">-</span>scale<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> maximum<span class="token operator">-</span>scale<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> user<span class="token operator">-</span>scalable<span class="token operator">=</span><span class="token number">0</span><span class="token string">" name="</span>viewport<span class="token string">">"</span> <span class="token operator">+</span>      ArticleStore<span class="token punctuation">.</span>article<span class="token punctuation">.</span>content  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>如果里面的图片超出里固定区域，可以顺便加上 img{width:100%;}。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>WebViewsource<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    html<span class="token punctuation">:</span>      <span class="token string">"&lt;meta content="</span>width<span class="token operator">=</span>device<span class="token operator">-</span>width<span class="token punctuation">,</span> initial<span class="token operator">-</span>scale<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> maximum<span class="token operator">-</span>scale<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> user<span class="token operator">-</span>scalable<span class="token operator">=</span><span class="token number">0</span><span class="token string">" name="</span>viewport<span class="token string">">&lt;style>img{width: 100%}&lt;/style> "</span> <span class="token operator">+</span>      ArticleStore<span class="token punctuation">.</span>article<span class="token punctuation">.</span>content  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre></li><li><p>虚线只支持全边框（borderWidth），不支持单边的（borderTopWidth）。 而且虚线要想生效，还必须同时设置 borderWidth 和 borderRadius。<br>参考链接：<a href="https://github.com/facebook/react-native/issues/24224" target="_blank" rel="noopener">https://github.com/facebook/react-native/issues/24224</a></p></li><li><p>问题 Task :react-native-gesture-handler:compileDebugJavaWithJavac FAILED<br>参考链接：<a href="https://github.com/kmagiera/react-native-gesture-handler/issues/642" target="_blank" rel="noopener">https://github.com/kmagiera/react-native-gesture-handler/issues/642</a></p></li><li><p>轮播插件：react-native-swiper。<br>遇到的问题是：onIndexChanged事件以及scrollBy都不怎么听话，各种问题（比如onIndexChanged时index索引可以为负数..），经常拆东墙补西墙。<br>最终问题点就在于一个：设置key！所有问题消失无踪影。<br><img src="https://upload-images.jianshu.io/upload_images/3453108-b30ace3d6018b40e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> react-native </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native</title>
      <link href="/2019/08/12/react-native-4/"/>
      <url>/2019/08/12/react-native-4/</url>
      
        <content type="html"><![CDATA[<h3 id="记录开始"><a href="#记录开始" class="headerlink" title="记录开始"></a>记录开始</h3><blockquote><p>第三篇react-native 问题记录。</p></blockquote><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>react：16.8.3<br>react-native：0.59.9<br>react-navigation：3.11.0</p><p>windows / mac<br>android studio安卓模拟器 / 安卓手机<br>xcode iphone模拟器 / iphone</p><h3 id="记录罗列"><a href="#记录罗列" class="headerlink" title="记录罗列"></a>记录罗列</h3><ol><li>发签名不一样。本地开发打包和给测试人员打包的签名不一样，导致调微信直接提示‘签名不一样’。</li></ol><p>解决方案如图所示：<br><img src="https://upload-images.jianshu.io/upload_images/3453108-30222aa36373603d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4D056DEE-EA42-4901-B4E2-1414528222B3.png"></p><p>参考文章：<a href="https://blog.csdn.net/qq_28183203/article/details/72831395" target="_blank" rel="noopener">利用grade解决APP release版和debug版签名不同的问题</a>。</p><ol start="2"><li><p>注意：友盟分享成功的code值有所不同<br>Android：0<br>iOS：200</p></li><li><p>浏览器debugger-ui，网络请求相关信息看不到，比如cookie里有没有token。<br>解决参考链接：<a href="https://github.com/jhen0409/react-native-debugger/issues/209" target="_blank" rel="noopener">https://github.com/jhen0409/react-native-debugger/issues/209</a></p></li></ol><ol start="4"><li>得到本地图片绝对地址，number 转 string。</li></ol><p>一般引用图片是这样的：<code>import img from &quot;./../static/img.png&quot;</code> 或者 <code>require &quot;./../static/img.png&quot;</code>，然而它们的值打印出来是数字，所以要想得到图片的绝对地址，就得用 Image 的一个API：</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-20d501cc8f027ba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>官网API参考链接：<a href="https://facebook.github.io/react-native/docs/image" target="_blank" rel="noopener"> react-native 的 Image</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> react-native </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native遇坑的陈列</title>
      <link href="/2019/07/07/react-native/"/>
      <url>/2019/07/07/react-native/</url>
      
        <content type="html"><![CDATA[<h3 id="记录开始"><a href="#记录开始" class="headerlink" title="记录开始"></a>记录开始</h3><blockquote><p>公司要做一个APP产品，自己会些皮毛，所以在开发的过程中还是遇到了比较多的问题（比如，一开始就安装不上啊，各种报红啊，怎么排查问题啊，轮播插件不响应啊，typescript不怎么会写啊…等等等）。顺便把mbox和typescript给融合进去了。</p></blockquote><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>windows系统<br>android studio安卓模拟器 / 安卓手机</p><h3 id="记录罗列"><a href="#记录罗列" class="headerlink" title="记录罗列"></a>记录罗列</h3><ol><li><p>vscode 运行 react-native run android 报错，然后用android-studio运行就好了。</p></li><li><p>vscode里开发，代码 stylesheet里样式无提示。两个解决方案：</p><ul><li><p>解决方案一，改源码。<br>参考：<a href="https://github.com/microsoft/vscode-react-native/issues/379" target="_blank" rel="noopener">https://github.com/microsoft/vscode-react-native/issues/379</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 源码</span><span class="token keyword">export</span> <span class="token keyword">function</span> create<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">NamedStyles</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">|</span> NamedStyles<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>styles<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 改进后的：</span><span class="token keyword">export</span> <span class="token keyword">function</span> create<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">NamedStyles</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>styles<span class="token punctuation">:</span> NamedStyles<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token punctuation">:</span> RegisteredStyle<span class="token operator">&lt;</span>T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre></li><li><p>解决方案二，版本更新，最新版已修复此问题。（一开始我不知道已有版本不是最新版…）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 因为之前装的版本是："@types/react-native": "0.57.63"</span><span class="token keyword">export</span> <span class="token keyword">function</span> create<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">NamedStyles</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">|</span> NamedStyles<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>styles<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 然后版本更新到："@types/react-native": "^0.60.0"</span><span class="token keyword">export</span> <span class="token keyword">function</span> create<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">NamedStyles</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">|</span> NamedStyles<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>styles<span class="token punctuation">:</span> T <span class="token operator">|</span> NamedStyles<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>报错：<code>Unhandled JS Exception: TypeError: undefined is not an object (evaluating &#39;this._subscribableSubscriptions.forEach&#39;)</code></p><p> 解决方案：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// package.json文件里加上</span> <span class="token string">"resolutions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"uglify-es"</span><span class="token punctuation">:</span> <span class="token string">">=3.3.4"</span>   <span class="token punctuation">}</span></code></pre><p> 参考：<a href="https://github.com/facebook/react-native/issues/17348" target="_blank" rel="noopener">https://github.com/facebook/react-native/issues/17348</a></p></li><li><p>不打开debug一切正常，当打开debug时报错：<code>window.deltaUrlToBlobUrl is not a function</code>。</p><p> <img src="https://upload-images.jianshu.io/upload_images/3453108-ed976ab7e78b9bc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error.png"></p><p> 解决方案：localhost 改成 ip 地址。</p><p> 参考：<a href="https://stackoverflow.com/questions/49365217/react-native-debug-js-remotely-error-window-deltaurltobloburl-is-not-a-function" target="_blank" rel="noopener">https://stackoverflow.com/questions/49365217/react-native-debug-js-remotely-error-window-deltaurltobloburl-is-not-a-function</a></p></li><li><p>react-native-swiper，scrollBy用法。</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-723338ec09f20cf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>react-native-swiper，轮播数据用map循环动态渲染，onIndexChanged 只执行一次：</p><p> 拒绝此类方案：拆东墙补西墙 <a href="https://www.jianshu.com/p/a46a57484946" target="_blank" rel="noopener">https://www.jianshu.com/p/a46a57484946</a> ！</p><p> 解决方案：对list数组进行判断。(注：加下面四句代码就行了)</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>HomeStore<span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ++++++++ 对list数组进行判断</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>             <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>Swiper style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>swiper<span class="token punctuation">}</span> showsButtons<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                     ref<span class="token operator">=</span><span class="token punctuation">{</span>swiper <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> HomeStore<span class="token punctuation">.</span>swiperDom <span class="token operator">=</span> swiper <span class="token punctuation">}</span><span class="token punctuation">}</span>                     loadMinimal<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                     index<span class="token operator">=</span><span class="token punctuation">{</span>HomeStore<span class="token punctuation">.</span>currentIndex<span class="token punctuation">}</span>                     loop<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> showsPagination<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                     automaticallyAdjustContentInsets<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                     removeClippedSubviews<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                     bounces<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                     onIndexChanged<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onIndexChanged<span class="token punctuation">}</span> <span class="token operator">></span>                     <span class="token punctuation">{</span>                         HomeStore<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                             <span class="token keyword">return</span> <span class="token punctuation">(</span>                                 <span class="token operator">&lt;</span>Info item<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span> list<span class="token operator">=</span><span class="token punctuation">{</span>HomeStore<span class="token punctuation">.</span>list<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                             <span class="token punctuation">)</span>                         <span class="token punctuation">}</span><span class="token punctuation">)</span>                     <span class="token punctuation">}</span>                 <span class="token operator">&lt;</span><span class="token operator">/</span>Swiper<span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ++++++++ 对list数组进行判断</span>         <span class="token keyword">return</span> <span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// ++++++++ 对list数组进行判断</span>     <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// ++++++++ 对list数组进行判断</span> <span class="token punctuation">}</span></code></pre></li><li><p>报错：<code>request:fail url not in domain list</code>。在获取地址时，用的腾讯api解析的经纬度，测试时没问题，上线了就报这个错了。</p><p> 解决方案：微信公众平台，在“设置” -&gt; “开发设置”中设置request合法域名，添加<a href="https://apis.map.qq.com。（本来以为他们是一家，不用加，结果还是要加。）" target="_blank" rel="noopener">https://apis.map.qq.com。（本来以为他们是一家，不用加，结果还是要加。）</a></p><p> 参考：<a href="https://blog.csdn.net/weixin_43047977/article/details/84836501" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43047977/article/details/84836501</a> 。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> react-native </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 双向绑定实现</title>
      <link href="/2019/04/11/vue-two-way-bind/"/>
      <url>/2019/04/11/vue-two-way-bind/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>用vue这么久，也了解过它的双向绑定原理，但是没有实现过，所以还是实地手写一个深入理解下。</p></blockquote><h3 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h3><ul><li>单向绑定：Model数据改变，引起View视图的更新。</li><li>双向绑定：Model数据改变，引起View视图的更新；View视图的改变，引起Model数据的更新。</li></ul><p><strong>双向绑定，就是在单向绑定的基础上给可输入元素（input、textarea 等）添加了change( input )事件，来动态修改model。</strong></p><blockquote><p>总结：   双向绑定 =  单向绑定 + 事件的监听 </p></blockquote><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><ul><li><p>单向绑定：</p><pre><code>1. 通过Object.defineProperty()来实现对属性的劫持，达到监听数据变动的目的。2. 发布订阅模式。维护一个数组，用来收集订阅者，当数据变动时，发布消息给订阅者。3. 订阅者收到通知，触发相应的监听回调，更新视图。</code></pre></li><li><p>事件监听</p><pre><code>给可输入元素（input、textarea等）添加change(input)事件，来动态修改model。</code></pre></li></ul><h3 id="思考实现步骤"><a href="#思考实现步骤" class="headerlink" title="思考实现步骤"></a>思考实现步骤</h3><ul><li>新建两个文件（ index.html 和 index.js ），并写好初始化代码。</li><li>index.js 里实现双向绑定：<pre><code>1. 实现一个监听器Observer，用来劫持监听所有属性，若有变动，就通知订阅者。2. 实现一个订阅者Watcher，每一个Watcher都绑定一个更新函数，Watcher可以收到属性的变化通知，并执行相应的更新函数，从而更新视图。3. 因为订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者。4. 实现一个解析器Compile，可以扫描解析每个节点的相关指令（v-model，v-on等）。如果节点存在这些指令，则初始化这些节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。5. 事件监听，改变model数据</code></pre></li></ul><h3 id="开始代码实现"><a href="#开始代码实现" class="headerlink" title="开始代码实现"></a>开始代码实现</h3><ul><li><p>步骤一：新建两个文件（ index.html 和 index.js ），并初始化代码。<br><code>index.html</code><br><code>`</code><br>&lt;!DOCTYPE html&gt;</p><html>  <head><meta name="generator" content="Hexo 3.9.0"><br>      <meta charset="UTF-8"><br>      <meta name="viewport" content="width=device-width, initial-scale=1.0"><br>      <meta http-equiv="X-UA-Compatible" content="ie=edge"><br>      <title>实现-vue-双向绑定</title><br>  <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head>  <body><br><br>      <div id="practice"><br>          <h2>实现-vue-双向绑定</h2><br><br>          <div v-text="name"></div><br>          <div v-text="desc"></div><br>          <input type="text" v-model="desc"><br>      </div><br><br>      <script src="./index.js"></script><br>      <script><br>          new Vue({<br>              el: ‘#practice’,<br>              data: {<br>                  name: ‘lingzi’,<br>                  desc: ‘i am so cute’<br>              }<br>          })<br>      </script><br><br>  </body></html></li></ul><p></p><pre><code>`index.js`</code></pre><p>class Vue {<br>    constructor(options) {</p><pre><code>}</code></pre><p>}</p><pre><code>- 步骤二：index.js里实现双向绑定    1.  实现一个监听器Observer，用来劫持监听所有属性，若有变动，就通知订阅者。</code></pre><p>class Vue {</p><pre><code>constructor(options) {    let data = options.data;    const el = document.querySelector(options.el);    this.Observer(data);}// 监听器Observer(obj) {    if (!data || typeof data !== &#39;object&#39;) return;    for (const key in obj) {        let value = obj[key];        Object.defineProperty(obj, key, {            get: () =&gt; {                return value;            },            set: (newValue) =&gt; {                value = newValue;                // TODO 通知订阅者            }        })    }}</code></pre><p>}</p><pre><code>   2. 实现一个订阅者Watcher，每一个Watcher都绑定一个更新函数，Watcher可以收到属性的变化通知，并执行相应的更新函数，从而更新视图。</code></pre><p>class Vue {<br>    … //省略<br>}</p><p>// 订阅者<br>class Watcher {</p><pre><code>constructor(el, vm, exp, attr) {    this.el = el;    this.vm = vm;    this.exp = exp;    this.attr = attr;    this.update();}update() {    this.el[this.attr] = this.vm.data[this.exp];   //更新视图}</code></pre><p>}</p><pre><code>3.因为订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者。</code></pre><p>class Vue {<br>    … //省略<br>     Observer(obj) {<br>        if (!obj || typeof obj !== ‘object’) return;</p><pre><code>    for (const key in obj) {        let value = obj[key];        Object.defineProperty(obj, key, {            get: () =&gt; {                return value;            },            set: (newValue) =&gt; {                value = newValue;                // TODO 通知订阅者                this.dep.notify();   // ++++++++加上这句            }        })    }}</code></pre><p>}</p><p>// 订阅者<br>class Watcher {<br>    … //省略<br>}</p><p>// 收集订阅者<br>class Dep {<br>    constructor() {<br>        this.subs = [];<br>    }<br>    addSub(sub) {<br>        this.subs.push(sub);<br>    }<br>    notify() {<br>        this.subs.forEach((sub) =&gt; {<br>            sub.update();<br>        })<br>    }<br>}</p><pre><code>4. 实现一个解析器Compile，可以扫描解析每个节点的相关指令（v-model，v-on等）。如果节点存在这些指令，则初始化这些节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。 </code></pre><p>class Vue {</p><pre><code>constructor(options) {    ... //省略    this.Observer(this.data);    this.Compile(this.el);   // ++++++++++加上这句}// 监听器Observer(obj) {    ... //省略}Compile(el) {    const nodes = el.children;    [...nodes].forEach((node, index) =&gt; {        if (node.hasAttribute(&#39;v-text&#39;)) {            let attrVal = node.getAttribute(&#39;v-text&#39;);            this.dep.addSub(new Watcher(node, this, attrVal, &#39;innerHTML&#39;));        }        if (node.hasAttribute(&#39;v-model&#39;)) {            let attrVal = node.getAttribute(&#39;v-model&#39;);            this.dep.addSub(new Watcher(node, this, attrVal, &#39;value&#39;));        }    })}</code></pre><p>}</p><pre><code>5. 事件监听，改变model数据</code></pre><p>Compile(el) {<br>    const nodes = el.children;<br>    […nodes].forEach((node, index) =&gt; {</p><pre><code>    ... //省略    if (node.hasAttribute(&#39;v-model&#39;)) {        let attrVal = node.getAttribute(&#39;v-model&#39;);        this.dep.addSub(new Watcher(node, this, attrVal, &#39;value&#39;));        // ++++++++++++ 加上下面两句        node.addEventListener(&#39;input&#39;, () =&gt; {            this.data[attrVal] = node.value;        })    }})</code></pre><p>}<br><code>`</code></p><h4 id="结尾发言"><a href="#结尾发言" class="headerlink" title="结尾发言"></a>结尾发言</h4><p>实现的简陋型，供自己理解。<br>代码仓库地址：<a href="https://github.com/lingziyb/study-notes/tree/master/vue-two-way-bind" target="_blank" rel="noopener">https://github.com/lingziyb/study-notes/tree/master/vue-two-way-bind</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目加上docker部署，react+github+travis+docker</title>
      <link href="/2019/02/26/docker-blog/"/>
      <url>/2019/02/26/docker-blog/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>一直想上手一下 <code>docker</code> ，奈何自己摆脱不了懒惰的天性。就在之前有个 <code>docker</code> 的线下技术活动，就刚好学习一下。<br>如何实践呢？就在一个前端项目上结合 <code>docker</code> 部署吧。</p></blockquote><h3 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h3><blockquote><p>我有一个博客，仓库是<code>github</code>，前端是用<code>vue</code>（或者<code>react</code>）写的，结合<code>travis CI</code>持续集成，再用<code>gulp</code>自动发布到服务器上。<br>[ 注：怕小白不懂，详说下流程。先本地 <code>git commit &amp;&amp; git push</code> 代码到<code>github</code>仓库，然后<code>travis CI</code>会自动拉取代码并执行<code>travis.yml</code>文件里的命令<code>npm install &amp;&amp; gulp publish</code>。]</p></blockquote><p>现在要加入<code>docker</code>，那么如何加呢？</p><h3 id="思考结果"><a href="#思考结果" class="headerlink" title="思考结果"></a>思考结果</h3><blockquote><p>一开始不咋懂，就探索的第一个方案，结果想改个小东西的时候发现太麻烦，就发现了第二种方案。 </p></blockquote><p>两种方案：</p><ul><li>方案一：先构建镜像上传到<code>dockerhub</code>仓库，然后在服务器上拉取镜像并创建容器。<ol><li>构建镜像：<code>docker build</code></li><li>上传：<code>docker push</code></li><li>拉取镜像：<code>docker pull</code> </li><li>创建容器：<code>docker run</code></li></ol></li><li>方案二：直接在服务器上拉取代码构建镜像，并创建容器。<ol><li>构建镜像：<code>docker build</code></li><li>创建容器：<code>docker run</code></li></ol></li></ul><h3 id="真正实践"><a href="#真正实践" class="headerlink" title="真正实践"></a>真正实践</h3><blockquote><p>这里只详述方案一，方案二省略！！</p></blockquote><h6 id="1-准备工作（-这些都要自己先准备好-）："><a href="#1-准备工作（-这些都要自己先准备好-）：" class="headerlink" title="1. 准备工作（ 这些都要自己先准备好 ）："></a>1. 准备工作（ 这些都要自己先准备好 ）：</h6><ul><li>本地新建一个前端项目，并且远程仓库是<code>github</code>。</li><li>服务器上安装<code>docker</code>（如何安装，请看 <a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官网</a> ）。</li><li>然后了解下<code>github</code>的<code>CI</code>工具 <code>travis CI</code>，并把项目CI跑起来。</li></ul><p>准备工作做好后，就开始下面的流程。</p><h6 id="2-第一步："><a href="#2-第一步：" class="headerlink" title="2. 第一步："></a>2. 第一步：</h6><ul><li>在已建好的项目根目录加入2个文件：<code>Dockerfile</code>、<code>nginx.conf</code>:</li></ul><p><code>Dockerfile</code>:</p><pre><code>from nginxlabel maintainer &quot;lingzi&quot;copy ./build/ /usr/share/nginx/html/copy ./nginx.conf /etc/nginx/conf.d/default.confexpose 83</code></pre><p><code>nginx.conf</code>:</p><pre><code>server {    listen       83;    root         /usr/share/nginx/html/;    include /etc/nginx/default.d/*.conf;    location / {      index index.html index.htm;      try_files $uri $uri/ /index.html;    }    location /api/ {      proxy_pass http://lemonof.com:7001/;    }    error_page 404 /404.html;        location = /40x.html {    }    error_page 500 502 503 504 /50x.html;        location = /50x.html {    }}</code></pre><h6 id="3-第二步："><a href="#3-第二步：" class="headerlink" title="3. 第二步："></a>3. 第二步：</h6><ul><li>因为要把创建的镜像推到<code>dockerhub</code>仓库，所以要先在<a href="https://hub.docker.com" target="_blank" rel="noopener">dockerhub官网</a>注册账号。</li><li>新建travis.yml文件<br><code>travis.yml</code>:<pre><code>language: node_jsnode_js:- &quot;8&quot;install: npm installscript:- npm run build- docker build -t imagename .   // `imagename`是变量，镜像的名字，你随便写个。特别注意，后面那个点是必须要的，不要写掉了！- docker login -u $DOCKER_USER -p $DOCKER_PASS- docker push imagename   // `imagename`注释同上</code></pre><em>注：<code>$DOCKER_USER</code>和<code>$DOCKER_PASS</code>是<code>travis</code>里设置的环境变量。为了安全，把用户名和密码都设置成环境变量了，当然，你也可以直接写上你的用户名和密码。例如：<code>docker login -u 用户名 -p 密码</code></em></li></ul><h6 id="4-第三步："><a href="#4-第三步：" class="headerlink" title="4. 第三步："></a>4. 第三步：</h6><ul><li>用<code>xshell</code>登录服务器。</li><li>因为准备工作里已经安装好了<code>docker</code>（注：没装的赶紧装），此时直接在服务器上拉取镜像：<pre><code>docker pull imagename</code></pre><strong>注：如果<code>dockerhub</code>平台里<code>imagename</code>设置为<code>private</code>，如下图所示，就要先登录：<code>docker login -u username -p password</code>，才能拉取镜像。</strong><br><img src="https://upload-images.jianshu.io/upload_images/3453108-e570f97e94448457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="repository设置.png"></li></ul><ul><li>在服务器上创建容器并运行<pre><code>docker run --name dockername -d -p 83:83 imagename// dockername   容器名；// imagename  镜像名// -d 后台运行容器，并返回容器ID；// -p 端口映射，格式为：主机(宿主)端口:容器端口</code></pre>现在访问服务器的<code>83</code>端口，应该就能看到东西了。这就是我博客的首页了。<br><img src="https://upload-images.jianshu.io/upload_images/3453108-eb583a1f2469de09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页.png"></li></ul><h4 id="结尾发言"><a href="#结尾发言" class="headerlink" title="结尾发言"></a>结尾发言</h4><p>希望能帮到大家。<br>代码仓库地址：<a href="https://github.com/lingziyb/ice-blog" target="_blank" rel="noopener">https://github.com/lingziyb/ice-blog</a></p><hr><p>参考文章如下：<br><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">docker入门教程</a><br><a href="https://github.com/fengmu456/enok-blog/blob/master/.travis.yml" target="_blank" rel="noopener">travis设置：github enok-blog</a><br><a href="http://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">docker命令大全</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> travis </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面事件的生命周期 javascript（DOMContentLoaded、load、readyState）</title>
      <link href="/2018/12/07/js-page-lifecycle/"/>
      <url>/2018/12/07/js-page-lifecycle/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>页面加载完成时，即分为：dom解析完毕和所有资源加载完毕。基本概念模糊，现在细细的掌握下。</p></blockquote><p>###页面生命周期</p><ol><li><p><code>DOMContentLoaded</code> 事件在<code>DOM</code>树构建完毕后被触发，我们可以在这个阶段使用 <code>JS</code> 去访问元素。</p><ul><li><code>async</code> 和 <code>defer</code> 的脚本可能还没有执行。</li><li>图片及其他资源文件可能还在下载中。</li></ul></li><li><p><code>load</code> 事件在页面所有资源被加载完毕后触发，通常我们不会用到这个事件，因为我们不需要等那么久。</p></li><li><code>beforeunload</code> 在用户即将离开页面时触发，它返回一个字符串，浏览器会向用户展示并询问这个字符串以确定是否离开。</li><li><code>unload</code> 在用户已经离开时触发，我们在这个阶段仅可以做一些没有延迟的操作，由于种种限制，很少被使用。</li><li><code>document.readyState</code> 表征页面的加载状态，可以在 <code>readystatechange</code> 中追踪页面的变化状态：<ul><li><code>loading</code> —— 页面正在加载中。</li><li><code>interactive</code> —— 页面解析完毕，时间上和 <code>DOMContentLoaded</code> 同时发生，不过顺序在它之前。</li><li><code>complete</code> —— 页面上的资源都已加载完毕，时间上和 <code>window.onload</code> 同时发生，不过顺序在他之前。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em>发生顺序依次为：</em> </p><blockquote><ol><li><code>readyState</code>(loading)  </li><li><code>readyState</code>(interactive) </li><li><code>DOMContentLoaded</code></li><li><code>readyState</code>(complete)</li><li><code>window.onload</code></li><li><code>beforeunload</code></li><li><code>unload</code></li></ol></blockquote><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><ul><li><p><code>1、$(function(){})  =&gt;  $(document).ready()</code>：在<code>IE8</code> 及以下浏览器下相当于<code>readyState(complete)</code>； 非<code>IE</code>浏览器 相当于 <code>DOMContentLoaded</code>。</p></li><li><p><code>2、$(window).load(function){} =&gt; window.onload=function(){}</code>。</p></li></ul><hr><p>查阅文章有：<br>1、<a href="https://github.com/fi3ework/Blog/issues/3" target="_blank" rel="noopener">[译]页面生命周期：DOMContentLoaded, load, beforeunload, unload解析</a>。<br>2、<a href="https://www.zcfy.cc/article/quick-tip-replace-jquery-039-s-ready-with-plain-javascript" target="_blank" rel="noopener">用原生 JavaScript 替换 jQuery 的 ready 方法</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> dom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中，map和foreach的异同点</title>
      <link href="/2018/11/27/js-map-foreach/"/>
      <url>/2018/11/27/js-map-foreach/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>我平时两个都会用，也知道一个有返回值一个没有返回值。但公司一个小妹子突然有一天就问我她有没有用对的时候，我竟然不能一眼确定，所以觉得自己还是没有熟练掌握，专门梳理一下，并记录下来，供以后记不清了查看。</p></blockquote><h3 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h3><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><p>1、都是循环遍历数组中的每一项。<br>2、<code>forEach()</code>和<code>map()</code>里面每一次执行匿名函数都支持3个参数：数组中的当前项<code>item</code>,当前项的索引<code>index</code>,原始数组<code>input</code>。<br>3、匿名函数中的<code>this</code>都是指<code>Window</code>。<br>4、只能遍历数组。</p><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><p>1、<code>foreach</code>：没有返回值。</p><blockquote><p>数组中有几项，那么传递进去的匿名回调函数就需要执行几次；<br>理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；但是可以自己通过数组的索引来修改原来的数组；</p><pre><code>var ary = [12,23,24,42,1];  var res = ary.forEach(function (item,index,input) {         input[index] = item*10;  })  console.log(res);  //--&gt; undefined;  console.log(ary);  //--&gt; 通过数组索引改变了原数组；  </code></pre></blockquote><p>2、<code>map</code>：有返回值，可以return 出来。</p><blockquote><p><code>map</code>的回调函数中支持<code>return</code>返回值；<code>return</code>的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；</p><pre><code>var ary = [12,23,24,42,1];  var res = ary.map(function (item,index,input) {      return item*10;  })  console.log(res);  //--&gt;[120,230,240,420,10];  原数组拷贝了一份，并进行了修改console.log(ary);  //--&gt;[12,23,24,42,1]；  原数组并未发生变化</code></pre></blockquote><h3 id="兼容写法："><a href="#兼容写法：" class="headerlink" title="兼容写法："></a>兼容写法：</h3><p>不管是forEach还是map在IE6-8下都不兼容（不兼容的情况下在Array.prototype上没有这两个方法）,那么需要我们自己封装一个都兼容的方法，代码如下：</p><pre><code>/** * forEach遍历数组 * @param callback [function] 回调函数； * @param context [object] 上下文； */  Array.prototype.myForEach = function myForEach(callback,context){      context = context || window;      if(&#39;forEach&#39; in Array.prototye) {          this.forEach(callback,context);          return;      }      //IE6-8下自己编写回调函数执行的逻辑      for(var i = 0,len = this.length; i &lt; len;i++) {          callback &amp;&amp; callback.call(context,this[i],i,this);      }  }   /** * map遍历数组 * @param callback [function] 回调函数； * @param context [object] 上下文； */  Array.prototype.myMap = function myMap(callback,context){      context = context || window;      if(&#39;map&#39; in Array.prototye) {          return this.map(callback,context);      }      // IE6-8下自己编写回调函数执行的逻辑      var newAry = [];      for(var i = 0,len = this.length; i &lt; len;i++) {          if(typeof  callback === &#39;function&#39;) {              var val = callback.call(context,this[i],i,this);              newAry[newAry.length] = val;          }      }      return newAry;  }  </code></pre><p>注：<br>1、<code>foreach</code>和<code>map</code>都不改变原数组，map可以return一个新数组，而foreach可以通过数组索引来修改原来的数组。<br>2、本文摘自 <a href="https://segmentfault.com/q/1010000013170900" target="_blank" rel="noopener">https://segmentfault.com/q/1010000013170900</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中，for...in 和 for...of 的区别</title>
      <link href="/2018/10/22/js-for-in-of/"/>
      <url>/2018/10/22/js-for-in-of/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>我一直分不清它们，所以专门研究对比下。</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h6 id="1-官方说法"><a href="#1-官方说法" class="headerlink" title="1.官方说法"></a>1.官方说法</h6><p>无论是<code>for...in</code>还是<code>for...of</code>语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。<br><code>for...in</code>：语句以原始插入顺序迭代对象的可枚举属性。<br><code>for...of</code>：语句遍历可迭代对象定义要迭代的数据。</p><h6 id="2-通俗易懂的说法"><a href="#2-通俗易懂的说法" class="headerlink" title="2.通俗易懂的说法"></a>2.通俗易懂的说法</h6><p><code>for...in</code>：循环出的是<code>key</code>。<br><code>for...of</code>：循环出的是<code>value</code>。<br>注意，<code>for...of</code>是<code>ES6</code>新引入的特性。修复了<code>ES5</code>引入的<code>for...in</code>的不足。</p><p>###示例</p><p>以下示例显示了与<code>Array</code>一起使用时，<code>for...of</code>循环和<code>for...in</code>循环之间的区别。</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>objCustom <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>arrCustom <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> iterable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>iterable<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// logs 0, 1, 2, "foo", "arrCustom", "objCustom"</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iterable<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// logs 0, 1, 2, "foo"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// logs 3, 5, 7</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在循环对象属性的时候，使用<code>for...in</code>；在遍历数组的时候，使用<code>for...of</code>。</p><p>查阅文章有：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of</a><br><a href="https://segmentfault.com/q/1010000006658882" target="_blank" rel="noopener">https://segmentfault.com/q/1010000006658882</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react+react-router+mobx+axios+less 搭建一个框架</title>
      <link href="/2018/08/06/react-mobx-axios/"/>
      <url>/2018/08/06/react-mobx-axios/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前做过react项目，但是没有全面搭过框架，顺便研究一波mobx。<br>项目代码github地址：<a href="https://github.com/lingziyb/react-mobx-demo" target="_blank" rel="noopener">https://github.com/lingziyb/react-mobx-demo</a></p></blockquote><p>##一、选react脚手架</p><ul><li>想：自己搭整个框架还是比较费劲的，所以首先想到用它的脚手架来初始化一个大概的框架结构。</li><li>搜：开始搜脚手架，最出名的就是facebook官方出版的<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>，那我们就用这个。</li></ul><p>##二、使用<code>create-react-app</code>初始化项目<br>工具会帮你初始化一个简单基本的项目并且会自动帮你安装项目所需要的各种依赖</p><pre><code>  npx create-react-app my-app  cd my-app  yarn start   //或者npm start</code></pre><p>此时浏览器会自动访问 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a>，你会看到一个 <code>react</code> 的欢迎界面，如下：代表你的项目已经正常运行了。<br><img src="https://upload-images.jianshu.io/upload_images/3453108-f38133efa6bc8f67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行后的页面.png"></p><p>##三、配置项</p><h4 id="1-展开配置项"><a href="#1-展开配置项" class="headerlink" title="1. 展开配置项"></a>1. 展开配置项</h4><p><img src="https://upload-images.jianshu.io/upload_images/3453108-454a0f8629760594.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置项打开前.png"></p><p>虽然项目已经运行，但是在项目目录里是找不到<code>webpack</code>配置项的。比如，我们想配置less、配置alias别名，这时我们需要做一个操作：展开项目（<code>eject</code>）[ 注：这个一个不可逆过程，一旦你执行了，就不能回到初始化 ] 。</p><pre><code>  yarn eject   // 或者 npm run eject</code></pre><p>再看项目结构，此时已多了一些其他目录，展开<code>config</code>目录，里面就有<code>webpack</code>配置文件以及其他各种配置，如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-32eb372263c43fca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置项打开后.png"></p><h4 id="2-less配置"><a href="#2-less配置" class="headerlink" title="2. less配置"></a>2. <code>less</code>配置</h4><pre><code>  yarn add less less-loader </code></pre><p>######修改 webpack配置文件</p><ul><li>找到 <code>webpack.config.dev.js</code> 与 <code>webpack.config.prod.js</code> 文件，后缀 <code>dev</code> 表示开发的配置，<code>prod</code> 表示是生产环境的配置，因此两个配置文件都需要修改。</li><li>修改<code>webpack.config.dev.js</code>，在<code>module</code>的<code>rules</code>字段中更改以下代码<br>更改前：<pre><code>{  test: /\.css$/,  use: [      require.resolve( &#39;style-loader&#39; ),      {            loader: require.resolve( &#39;css-loader&#39; ),          options: {          importLoaders: 1,      },       ...  ],                },</code></pre>更改后：<pre><code>{  test: /\.(css|less)$/,    // 划重点  use: [      require.resolve( &#39;style-loader&#39; ),      {            loader: require.resolve( &#39;css-loader&#39; ),          options: {          importLoaders: 1,      },       ...      {          loader: require.resolve( &#39;less-loader&#39; ),    // 划重点      }  ],                },</code></pre></li><li>修改<code>webpack.config.prod.js</code> ，同理，在<code>rules</code>字段中更改以上代码</li></ul><h2 id="四、引入路由"><a href="#四、引入路由" class="headerlink" title="四、引入路由"></a>四、引入路由</h2><h4 id="1-更改src目录结构"><a href="#1-更改src目录结构" class="headerlink" title="1. 更改src目录结构"></a>1. 更改src目录结构</h4><ul><li>便于更符合实际项目场景，我们在<code>src</code>下新建如下几个文件夹：<pre><code>    a. `api`文件夹存放ajax请求    b. `components`文件夹存放组件    c. `pages`文件夹存放页面    d. `routes`文件夹存放路由    e. `stores`文件夹存放数据    f. `utils`文件夹存放工具类函数          </code></pre></li></ul><h4 id="2-设置文件别名"><a href="#2-设置文件别名" class="headerlink" title="2. 设置文件别名"></a>2. 设置文件别名</h4><p>既然有了文件夹来区分不同的功能，为了方便文件的相互，我们可以利用 webpack 来设置别名。</p><ul><li>修改<code>config</code>文件夹下的<code>paths</code>文件<pre><code>module.exports = {...appApi: resolveApp( &#39;src/api&#39; ),appComponents: resolveApp(&#39;src/components&#39;),appPages: resolveApp( &#39;src/pages&#39; ),appRoutes: resolveApp(&#39;src/routes&#39;),appStores: resolveApp( &#39;src/stores&#39; ),appUtils: resolveApp(&#39;src/utils&#39;),...</code></pre></li><li><p>修改 <code>webpack</code> 配置项 <code>alias</code></p><pre><code>alias: {...api: paths.appApi,components: paths.appComponents,pages: paths.appPages,routes: paths.appRoutes,stores: paths.appStores,utils: paths.appUtils,...</code></pre><h4 id="3-安装路由组件-react-router"><a href="#3-安装路由组件-react-router" class="headerlink" title="3. 安装路由组件 react-router"></a>3. 安装路由组件 <code>react-router</code></h4><pre><code>yarn add react-router react-router-dom</code></pre></li><li><p>在<code>pages</code>文件夹中新建<code>home.jsx</code>页面和<code>about.jsx</code>页面<br> <code>home.jsx</code><br><code>`</code><br>import React from ‘react’;<br>import { Link } from ‘react-router-dom’;</p></li></ul><p>class Home extends React.Component {<br>    render() {<br>        return (<br>            <div><br>                <p>这是首页</p><br>                <link to="/about">go to About<br>            </div><br>        );<br>    }<br>}</p><p>export default Home;</p><pre><code>   `about.jsx`</code></pre><p>import React from ‘react’<br>import { Link } from ‘react-router-dom’</p><p>class About extends React.Component {<br>    render() {<br>        return (<br>            <div><br>                <p>这是about页面</p><br>                <link to="/">go to Home<br>            </div><br>        )<br>    }<br>}</p><p>export default About;</p><pre><code>- 在`routes`文件夹中新建`index.jsx`页面</code></pre><p>import React from ‘react’<br>import { BrowserRouter as Router, Route } from ‘react-router-dom’</p><p>import Home from ‘pages/home’;<br>import About from ‘pages/about’;</p><p>const Routes = () =&gt; (<br>    <router><br>        <div><br>            <route exact path="/" component="{Home}/"><br>            <route path="/about" component="{About}/"><br>        </route></route></div><br>    </router><br>)</p><p>export default Routes;</p><pre><code>- 为了页面好看一点点，我们写个App.less</code></pre><p>.app {<br>    text-align: center;<br>    border: 1px solid #ddd;<br>    padding: 30px;<br>    p {<br>        color: green;<br>    }<br>}</p><pre><code>- 更改`app.js`文件</code></pre><p>import React, { Component } from ‘react’;<br>import Routes from ‘routes/index’;<br>import ‘./App.less’</p><p>class App extends Component {<br>    render() {<br>        return (<br>            <div classname="app"><br>                <routes><br>            </routes></div><br>        );<br>    }<br>}</p><p>export default App;</p><pre><code>此时首页长相：![首页.png](https://upload-images.jianshu.io/upload_images/3453108-225a7ce8aa496ba7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)此时about页长相：![about页](https://upload-images.jianshu.io/upload_images/3453108-aa50ad477b1b538c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)## 五、添加数据管理`mobx`#### 1. 按照依赖</code></pre><p>yarn add mobx mobx-react</p><pre><code>#### 2.开始使用- 使用 `mobx` 你还需要安装 `babel` 的装饰器插件，以及修改 `babel` 的配置</code></pre><p>  yarn add babel-plugin-transform-decorators-legacy</p><pre><code>- 修改 `package.json` 文件中的 `babel` 参数，或者在根目录下新建一个 .babelrc 文件</code></pre><p>“babel”: {<br>  “presets”: [<br>    “react-app”<br>  ],<br>  “plugins”: [<br>    “babel-plugin-transform-decorators-legacy”<br>  ]<br>…</p><pre><code>现在，你可以在你的组件中使用 `mobx` 来管理你的状态了。关于 `mobx` 的使用，你可以访问[官方文档](https://github.com/mobxjs/mobx)#### 3. 修改文件- 在`stores`里新建`index.js`、`home.js`、`about.js`。 【 注：home.js和about.js我用了两种方式写，都可以的。】`home.js`</code></pre><p>import { observable } from ‘mobx’;</p><p>const HomeStore = observable( {<br>    title: ‘this is home page’<br>} );</p><p>export default HomeStore;</p><pre><code>`about.js`</code></pre><p>import { observable } from ‘mobx’;</p><p>class AboutStore {<br>    @observable title = ‘this is about page’;<br>}</p><p>export default new AboutStore();</p><pre><code>`index.js`</code></pre><p>import aboutStore from ‘./about’;<br>import homeStore from ‘./home’;</p><p>const store = {<br>    aboutStore,<br>    homeStore<br>};</p><p>export default store;</p><pre><code>- 修改`app.js`</code></pre><p>import React, { Component } from ‘react’;<br>import Routes from ‘routes/index’;<br>import ‘./App.less’;<br>import { Provider } from ‘mobx-react’;<br>import stores from ‘stores/index’;</p><p>class App extends Component {<br>    render() {<br>        return (<br>            <div classname="app"><br>                <provider {...stores}><br>                    <routes><br>                </routes></provider><br>            </div><br>        );<br>    }<br>}</p><p>export default App;</p><pre><code>- 修改`pages`里的`home.jsx`</code></pre><p>import React from ‘react’;<br>import { Link } from ‘react-router-dom’;<br>import { inject } from ‘mobx-react’;</p><p>@inject( ‘homeStore’ )<br>class Home extends React.Component {<br>    render() {<br>        return (<br>            <div><br>                <p>{this.props.homeStore.title}</p><br>                <link to="/about">go to About<br>            </div><br>        );<br>    }<br>}</p><p>export default Home;</p><pre><code>- 修改`pages`里的`about.jsx`</code></pre><p>import React from ‘react’<br>import { Link } from ‘react-router-dom’<br>import { inject } from ‘mobx-react’;</p><p>@inject( ‘aboutStore’ )<br>class About extends React.Component {<br>    render() {<br>        return (<br>            <div><br>                <p>{ this.props.aboutStore.title }</p><br>                <link to="/">goto Home<br>            </div><br>        )<br>    }<br>}</p><p>export default About;</p><pre><code>这是现在的首页：【数据变了哟】![首页.png](https://upload-images.jianshu.io/upload_images/3453108-84f252907bc6b884.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这是现在的about页：【数据变了哟】![about页.png](https://upload-images.jianshu.io/upload_images/3453108-c236fb5d5b0007d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)## 六、数据请求`axios`</code></pre><p>  yarn add axios</p><pre><code>- 在`api`文件夹里增加`home.js`</code></pre><p>import axios from ‘axios’;</p><p>export default {</p><pre><code>/** * 获取首页列表页数据 * @returns {Promise.&lt;*&gt;} */async getList(){    return await axios.get( &#39;http://lemonof.com:82/api/getList&#39; ).then( ( res ) =&gt; res.data.data );}</code></pre><p>}</p><pre><code>- 更改`stores`里的`home.js`</code></pre><p>import { observable, action } from ‘mobx’;<br>import HomeApi from ‘api/home’;</p><p>const HomeStore = observable( {<br>    title: ‘this is home page’,<br>    list: [],</p><pre><code>// 获取首页数据async getList() {    this.list = await HomeApi.getList();}</code></pre><p>} );</p><p>export default HomeStore;</p><pre><code>- 更改`pages`里的`home.jsx`</code></pre><p>import React from ‘react’;<br>import { Link } from ‘react-router-dom’;<br>import { observer, inject } from ‘mobx-react’;</p><p>@inject( ‘homeStore’ )<br>@observer<br>class Home extends React.Component {</p><pre><code>componentDidMount() {    this.props.homeStore.getList();}render() {    return (        &lt;div&gt;            &lt;p&gt;{this.props.homeStore.title}&lt;/p&gt;            &lt;Link to=&quot;/about&quot;&gt;go to About&lt;/Link&gt;            &lt;div style={{ textAlign: 'left', width: '450px', margin: 'auto' }}&gt;                &lt;p&gt;下面是列表数据：&lt;/p&gt;                {                    this.props.homeStore.list &amp;&amp; this.props.homeStore.list.map( ( el ) =&gt; {                        return ( &lt;div key={el.id}&gt;标题：{el.title}&lt;/div&gt; )                    } )                }            &lt;/div&gt;        &lt;/div&gt;    );}</code></pre><p>}</p><p>export default Home;<br><code>`</code><br>此时首页长相：【页面没有优化，请将就看】</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-a0e196e2a8e6fe59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页.png"></p><p>此时about页长相：【页面没有优化，请将就看】</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-72ebf4e71bdd322d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="about页.png"></p><p>哇！终于写完了。<br>后续我再把UI优化下。<br>最终项目代码地址：<a href="https://github.com/lingziyb/react-mobx-demo" target="_blank" rel="noopener">https://github.com/lingziyb/react-mobx-demo</a></p><p>查阅文章有：<br>create-react-app全家桶router+mobx：<a href="https://www.jianshu.com/p/2d54c2b3cfa3" target="_blank" rel="noopener">https://www.jianshu.com/p/2d54c2b3cfa3</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
            <tag> react </tag>
            
            <tag> react-router </tag>
            
            <tag> mobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽奖转盘实现 ( vue + js + html + less )</title>
      <link href="/2017/12/08/vue-award/"/>
      <url>/2017/12/08/vue-award/</url>
      
        <content type="html"><![CDATA[<h3 id="书写文章起因"><a href="#书写文章起因" class="headerlink" title="书写文章起因"></a>书写文章起因</h3><blockquote><p>活动策划人员策划这个抽奖页面，用于app内。<br>当时，这个转盘布局我踩坑了，我本以为这么简单的布局应该不用绝对定位的，是我想多了！然后改为绝对定位来实现，因为要简单些。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/3453108-d3d4ecbe2309e96e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="抽奖转盘"></p><h5 id="一、九个格子和开始按钮，页面布局的实现思路"><a href="#一、九个格子和开始按钮，页面布局的实现思路" class="headerlink" title="一、九个格子和开始按钮，页面布局的实现思路"></a>一、九个格子和开始按钮，页面布局的实现思路</h5><p>这个用绝对定位，小格子相对于大转盘定位，这个我就给个简单例子就好了哈，我相信你们能懂起的，如果没理解到我再详说。<br><img src="http://upload-images.jianshu.io/upload_images/3453108-d082b6f230191c79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标注"></p><p>如上图所示，大框为父容器，九个小格子为子容器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child child1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child child2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child child3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child child9"</span> id<span class="token operator">=</span><span class="token string">"start"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>parent<span class="token punctuation">{</span>        position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">.</span>child<span class="token punctuation">{</span>             position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>child1<span class="token punctuation">{</span>            top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">...</span><span class="token operator">...</span>       <span class="token punctuation">.</span>active<span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h5 id="二、转动效果实现：（下面贴出vue文件的html和js代码，css代码没有。因为全贴出来太多了，如果想看详细代码，就到我的github仓库去观看或者下载）"><a href="#二、转动效果实现：（下面贴出vue文件的html和js代码，css代码没有。因为全贴出来太多了，如果想看详细代码，就到我的github仓库去观看或者下载）" class="headerlink" title="二、转动效果实现：（下面贴出vue文件的html和js代码，css代码没有。因为全贴出来太多了，如果想看详细代码，就到我的github仓库去观看或者下载）"></a>二、转动效果实现：（下面贴出vue文件的html和js代码，css代码没有。因为全贴出来太多了，如果想看详细代码，就到我的<a href="https://github.com/lingziyb/get-award" target="_blank" rel="noopener">github仓库</a>去观看或者下载）</h5><p><img src="http://upload-images.jianshu.io/upload_images/3453108-81429ffa16c6348f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="转动前.png"><br><img src="http://upload-images.jianshu.io/upload_images/3453108-cf9510c4ad2307d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="转动后.png"></p><p>app.vue</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// template</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"rotary-table"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"award"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(award,index) in awards"</span> <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"['award'+index,{'active': index==current}]"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>award<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"start-btn"</span> @click<span class="token operator">=</span><span class="token string">"start"</span><span class="token operator">></span>开始<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'get-award'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            current<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>              awards<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// 奖品数组</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'空'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'眼镜'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'包'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'笨驴'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'书'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'手链'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'美女'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'iphone'</span> <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            speed<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 速度</span>            diff<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 速度增加的值</span>            award<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 抽中的奖品</span>            time<span class="token punctuation">:</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true">// 记录开始抽奖时的时间</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 开始抽奖</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawAward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>diff <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">drawAward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 请求接口, 这里我就模拟请求后的数据(请求时间为2s)</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>award <span class="token operator">=</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'笨驴'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            window<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 若抽中的奖品id存在，则开始减速转动</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>award<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 转动减速</span>                    <span class="token comment" spellcheck="true">// 若转动时间超过4秒，并且奖品id等于小格子的奖品id，则停下来！</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>award<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>awards<span class="token punctuation">[</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">clearTimeout</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>timeout <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>award<span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 若抽中的奖品不存在，则加速转动</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 转动加速</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="结尾发言"><a href="#结尾发言" class="headerlink" title="结尾发言"></a>结尾发言</h4><p>如果没有理解到，可以留言问我哈。这是我专门写的小demo，希望能帮到大家。谢谢！<br>代码仓库地址：<a href="https://github.com/lingziyb/get-award" target="_blank" rel="noopener">https://github.com/lingziyb/get-award</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
            <tag> html </tag>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 向数组添加n个空字符串</title>
      <link href="/2017/12/07/js-add-empty-string/"/>
      <url>/2017/12/07/js-add-empty-string/</url>
      
        <content type="html"><![CDATA[<h4 id="书写文章起因"><a href="#书写文章起因" class="headerlink" title="书写文章起因"></a>书写文章起因</h4><blockquote><p>在最近的抽奖活动开发里，有这么个需求：<br>接口返回不定数量（length&lt;=9）的奖品数组，前端这边要循环展示长度为9的奖品数组。<br>so，开始我们今天的正题，添加空字符串数组。</p></blockquote><h5 id="方案1、splice-while"><a href="#方案1、splice-while" class="headerlink" title="方案1、splice + while"></a>方案1、splice + while</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span> a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// a结果是： [ '', '', '', '', '', '', 1, 2, 3 ]</span></code></pre><h5 id="方案2、for-push"><a href="#方案2、for-push" class="headerlink" title="方案2、for + push"></a>方案2、for + push</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">-</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span> a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token string">''</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// a的结果：[ 1, 2, 3, '', '', '', '', '', '' ]</span></code></pre><h5 id="方案3、Array-prototype-fill"><a href="#方案3、Array-prototype-fill" class="headerlink" title="方案3、Array.prototype.fill()"></a>方案3、Array.prototype.fill()</h5><p>Array.fill是 ES6 新增的方法，它可以帮助你填充数组。<br>定义：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 将原数组的每一个元素填充成 fill 传入的值。</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// => [6,6,6,6]</span></code></pre><p>它支持传入三个参数: fill(value, start, end)<br>value：用来填充数组元素的值。<br>start：可选 起始索引，默认值为0。<br>end：可选 终止索引，默认值为 this.length。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// [4, 4, 4]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// [1, 4, 4]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// [1, 4, 3]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// [4, 2, 3]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// [4, 4, 4]</span></code></pre><p>所以第三种方案是:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> <span class="token function">Array</span><span class="token punctuation">(</span> <span class="token number">9</span><span class="token operator">-</span>a<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> <span class="token string">''</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a 的结果为：[1, 3, 9, "", "", "", "", "", ""]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome Extension开发问题总结</title>
      <link href="/2017/10/06/extension-chrome/"/>
      <url>/2017/10/06/extension-chrome/</url>
      
        <content type="html"><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>在HTML文件里，css可以内嵌、可以内部样式表、也可以外链引入。</p><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>js就要注意了！！</p><ul><li>js不支持inline javascript</li><li>只能引入外部js文件</li></ul><p>按照下面两种错误方式会出现如图错误：</p><p><img src="http://upload-images.jianshu.io/upload_images/3453108-e77914c843d400fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error.png"></p><pre class=" language-javascript"><code class="language-javascript">错误做法<span class="token number">1</span>：<span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"test"</span> type<span class="token operator">=</span><span class="token string">"text"</span> onclick<span class="token operator">=</span><span class="token string">"open()"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">错误做法<span class="token number">2</span>：html文件代码：<span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"test"</span> type<span class="token operator">=</span><span class="token string">"text"</span> onclick<span class="token operator">=</span><span class="token string">"open()"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"popup.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">//引入外部js文件</span>popup<span class="token punctuation">.</span>js文件代码：<span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span></code></pre><p>所以请模仿下面正确做法！</p><pre class=" language-javascript"><code class="language-javascript">正确做法：html文件代码：<span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"test"</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"popup.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">//引入外部js文件</span>popup<span class="token punctuation">.</span>js文件代码：document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="google浏览器上预览"><a href="#google浏览器上预览" class="headerlink" title="google浏览器上预览"></a>google浏览器上预览</h3><p>教你们一招特别高效的办法，我以前都不知道，这次才发现的额！<br>1、点击图上红色框内按钮—-选择你的插件所在的文件夹—-确认。</p><p><img src="http://upload-images.jianshu.io/upload_images/3453108-d86c6e663230a8aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例1.png"><br>2、完成后如下图所示。</p><p><img src="http://upload-images.jianshu.io/upload_images/3453108-c894f3b421b8a842.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例2.png"><br>3、插件可以运行成功。最重要的是，当你改了代码，直接刷新下浏览器或者点插件或者点重新加载，都可以看到已改过的内容，超级方便。我以前还傻傻的跑去打包扩展程序，然后傻傻的把.crx文件拖到浏览器插件页里运行看效果。超级笨哇，都没有发现上面这个超级方便的东东。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器扩展插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年龄的思考 ---- 引申我的故事</title>
      <link href="/2016/11/06/age-thought/"/>
      <url>/2016/11/06/age-thought/</url>
      
        <content type="html"><![CDATA[<p>随时都在思考，思考工作，思考人生，思考怎么和人相处，思考怎么做才为对，思考怎么才能活出自我，什么才是自我，怎么才能开开心心…其实挺烦的。</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-5a250834bfb820a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="厦门--图中人在思考中"></p><p>今晚给父母打电话，父母对我说你可以考虑人生大事—耍朋友结婚了。说一次两次，没关系，但是说多了，我就有点不高兴了。感觉我的人生都无声的被人规划好了….真的有些反感了</p><p> 我今年芳龄23，我感觉挺小的，我说等我25岁之后你们再催我好吗？我说我从小就没有活出过我自己，现在好不容易毕业了，有工作有收入了，我想过过自己想要的生活，我想耍几年，好好过过自己。我也会存钱自己买房买车，我有自己的计划，你们自己挣钱自己存着，想花就花，以后还可以养老。我爸妈听我说要自己买房，他们就笑了，说：“像你现在这个收入，什么时候才买得起”。我说我先付首付，接下来每个月还贷咯。爸爸说，我们可以一起努力，当时我就 不高兴了，我说我不会花你们的钱的，我自己可以的，你们的钱自己存着，虽然对爸爸的话，我很是感动，但我不想他们把钱花在我身上，都养我二十几年了，难道还要养我么。我希望他们自己把钱存着，自己支配…</p><p>我从小就住在山上，上学都要爬山涉水，挺艰苦的。记得小学四年级在我们小镇上读书，从家里到镇上要走一个多小时，从山上下到山下，放学了又从山下爬到山上。学校缺水，小小的我和小伙伴们的背包里就是：一瓶（大的可口可乐瓶）米、一瓶干净的水和两本书到学校上学。中午晚上都自己蒸饭吃，菜都是自己从家里带的，不是泡菜，就是妈妈天不亮就起来给我炒的酸菜。那个时候，一周就两块五毛钱的生活费，我会一分不花的拿回家。</p><p>高中毕业，报考大学，我都不知道报什么学校，报什么专业。家里人都说，女孩子就应该当老师或者医生，有前途。我很反感，我既不喜欢当老师也不喜欢当医生，不知道为什么。家里也没什么德高望重的人给我指点，家里人都是朴实的农民和工人，我就自己对着志愿书。看到有个专业叫：“软件欧美外包工程师”，我都不懂这是什么东西。只知道里面有“欧美”两个字，我想应该是跟英语有关的吧，我喜欢英语，就直接在高考志愿里填了这个专业—“软件欧美外包工程师”。开学了，爸爸把我送到学校。大一开课，软件专业的c语言，我完全听不懂，感觉这东西好另类啊，听不懂。不懂网站是啥，网址又是啥，我就是个傻大白，要不是班里一个耍的好的男生冒着生命危险把卷子给我抄，我就挂科了！在此谢谢那个男生了。</p><p>大学里，我的室友们都喜欢打游戏，也没人认真听课。一开始，上课她们玩游戏，聊qq，我也跟着她们一起，就为了合群。因为我们是专科，班里认真学习的寥寥无几。软件专业，女生也相对较少。后面我觉得再这样下去，我真的觉得父母给我拿钱上大学真的浪费了，不能再这样了。既来之则安之，我没什么背景，家境一般，人也不是很漂亮，也不高，除了可爱乖巧，没什么标签可以贴在我身上。我花了一段时间的思考，决定去寻找跟我一起努力的人。后面在其他班里找到了一男一女，他们成了我的学习伙伴，走哪里，我们都是三人行。他们俩专业都很好，其中那个男生更是初中就开始学软件了，我跟着他们一起成长。记得大一那个寒假，我把c语言拿回家，过年前后我就自己拿着书自学，奇怪更令我高兴的是，我看了90多页后，我终于会用程序写“从一加到一百”的加法了。我暗自兴奋，觉得：“也不难嘛”，哈哈。就这样，我们三个毕业顺利都找到了工作。真的很感谢他们！我的大学有你们，我真的很幸运，谢谢！</p><p>回归正题，我从小到大，感觉都没为自己真正活过。我努力学习，为什么呢，就是因为家长老师们都说：“你们的目标就是考大学”。我为什么考大学，家里人说：“你不好好学习，你就跟我们一样哇泵（注解：哇泵的含义是：在农村大山里种田），又苦又累还没钱！”我不想哇泵。我就努力考大学，考上了大学，然后呢？人生迷茫了，先呆着吧。上了大学，家人当然希望你能找个好工作，好，我就努力找到好工作。现在工作了，一年了，家人又说，你可以耍朋友考虑人生大事了。我不高兴了！</p><p>我的人生就没为自己活过。现在好不容易解放了，工作了，我真的想过过自己，我喜欢跳舞，我就自己下几个软件在手机里，没事跳跳舞。想唱歌，就约一群好朋友去找个音质好的KTV  k歌。我想出去旅游走走，就报个团去见见世界。没事，买买花布置布置房间，租个好点的房子，就为了让心情好点。偶尔工作忙，加个班，就回来敷个好点的面膜保养保养我漂亮的脸蛋，哈哈。我喜欢画画，小的时候就喜欢了，看见可爱的小东西，就喜欢把它勾勒在纸上，一笔完成。喜欢古风的东西，就买套汉服古风的衣服，再弄个发型，美美的，开心。我喜欢读书，一时兴起，就会买几本书回来。</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-ec5d33aa54e26e84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="丽江--远离尘嚣"></p><p>该工作的时候，我就好好工作，周末闲暇之余也会多关注技术方面的知识，毕竟技术这个东西，不能落后，落后了找工作就困难了。节假日的时候，我就出去玩，见见外面的世界。</p><p>我已经浪费二十几年让自己无知的活着，我不允许后面的几十年里，浑浑噩噩的无知的活着。我要跟着自己的心走！努力去追求自己想要的，即使失败我也不后悔。</p><p>真的希望我们大家都能活出自我，都能开开心心的过每一天。虽然在现实中，就是强者为王，弱者为人鱼肉，但是我还是希望我们大家都能  —活出自我 — 开开心心！</p><p><img src="https://upload-images.jianshu.io/upload_images/3453108-ff104b07d82abc31.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="高中经常画的---小精灵"></p>]]></content>
      
      
      <categories>
          
          <category> 灵魂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一个作品</title>
      <link href="/2016/10/28/first-article/"/>
      <url>/2016/10/28/first-article/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3453108-2f91743c21d81981.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这幅画  虽然很简陋  但是它开启了我的写作之路…</p><p>就在那个时刻我累了；</p><p>就在那个时刻，我看到了这个萌萌的它；</p><p>就在刚刚好的那个时刻，我把它画下来，喜欢。</p><p>我高高兴兴的把它送给我隔壁的才女，知道它也喜欢这些。然而，几分钟后，它又回到我身边，上面还多了右边那个小小的另外一个它。我很想再在上面再添一个递给我的才女，但该认真上班做项目了，就把不起眼的它 摆在我桌子上不起眼的角落里。任它风吹雨晒好多天…..</p><p>我喜欢写写画画，觉得很有意义，能够充实我的生命。后来我觉得这种有意义的东西的结局 不应该是被遗弃在垃圾桶里，于是我买了个画框，今天画框刚到，我就迫不及待的给它来了个特写。^-^     ^-^      ^-^</p><p>其实我一直都想弄自己的博客，我是一只程序媛。但还在途中，所以还是先在其他平台上写写吧。不能我的个人网站一直不做好，我就一直不写作吧，所以，我来到简书。</p><p>我的写作之路从此开启！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写文章 </tag>
            
            <tag> 画画 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
